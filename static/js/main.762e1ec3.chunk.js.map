{"version":3,"sources":["components/App/device.js","components/IntroHeader/style.js","components/IntroHeader/index.js","components/ComingSoon/style.js","components/ComingSoon/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["size","deviceSize","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","IntroHeaderContainer","styled","div","IntroTextContainer","IntroTitle","h1","IntroSub","h3","IntroHeader","ComingSoonContainer","ComingSoon","href","target","rel","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAEMA,EAEO,QAFPA,EAGO,QAHPA,EAIM,QAJNA,EAKM,SALNA,EAMO,SANPA,EAOO,SAGEC,EAAa,CACxBC,QAAQ,eAAD,OAVE,QAUF,KACPC,QAAQ,eAAD,OAAiBH,EAAjB,KACPI,QAAQ,eAAD,OAAiBJ,EAAjB,KACPK,OAAO,eAAD,OAAiBL,EAAjB,KACNM,OAAO,eAAD,OAAiBN,EAAjB,KACNO,QAAQ,eAAD,OAAiBP,EAAjB,KACPQ,QAAQ,eAAD,OAAiBR,EAAjB,KACPS,SAAS,eAAD,OAAiBT,EAAjB,M,4tCCjBL,IAAMU,EAAuBC,IAAOC,IAAV,IAOpBX,EAAWC,QAMXD,EAAWE,QAKXF,EAAWG,QAGXH,EAAWI,OAGXJ,EAAWK,OAGXL,EAAWM,QAGXN,EAAWO,SAKXK,EAAqBF,IAAOC,IAAV,KAOlBE,EAAaH,IAAOI,GAAV,KAOVC,EAAWL,IAAOM,GAAV,IAGRhB,EAAWC,QAIXD,EAAWE,QAIXF,EAAWG,QAGXH,EAAWI,OAGXJ,EAAWK,OAGXL,EAAWM,QAGXN,EAAWO,SCvDTU,EAjBK,WAChB,OACI,kBAACR,EAAD,KACQ,kBAACG,EAAD,KACI,kBAACC,EAAD,4BAGA,kBAACE,EAAD,oC,+TCPb,IAAMG,EAAsBR,IAAOC,IAAV,IAGnBX,EAAWC,QAIXD,EAAWE,QAIXF,EAAWG,QAGXH,EAAWI,OAGXJ,EAAWK,OAGXL,EAAWM,QAGXN,EAAWO,SCbTY,EAVI,WACf,OACI,kBAACD,EAAD,4EAE8B,uBAAGE,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAzE,YAF9B,QAE8I,uBAAGF,KAAK,kCAAkCC,OAAO,SAASC,IAAI,uBAA9D,UAF9I,MCcOC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.762e1ec3.chunk.js","sourcesContent":["import React from 'react';\n\nconst size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n  }\n\n  export const deviceSize = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`\n  };","import styled from 'styled-components'\nimport { deviceSize } from '../App/device.js'\n\nexport const IntroHeaderContainer = styled.div`\n    height: 90vh;\n    background-color: #F9DC24;\n    color: black;\n    margin: 0;\n    font-size: 6rem;\n    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);\n    @media ${deviceSize.mobileS}{\n        font-size: 3.5rem;\n        clip-path: polygon(0 0, 100% 0, 100% 72vh, 0 100%);\n        height: 80vh;\n    }\n    \n    @media ${deviceSize.mobileM} {\n        font-size: 4rem;\n\n    }\n    \n    @media ${deviceSize.mobileL}{\n        font-size: 5rem;\n    }\n    @media ${deviceSize.tablet}{\n\n    }\n    @media ${deviceSize.laptop}{\n\n    }\n    @media ${deviceSize.laptopL}{\n\n    }\n    @media ${deviceSize.desktop}{\n\n    }\n    \n`\nexport const IntroTextContainer = styled.div`\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n`\nexport const IntroTitle = styled.h1`\n    padding: .5rem 0 0 0;\n    margin: 0;\n    line-height: 1.1;\n\n`\n\nexport const IntroSub = styled.h3`\n    margin: 0;\n    color: black;\n    @media ${deviceSize.mobileS}{\n\n    }\n    \n    @media ${deviceSize.mobileM} {\n        \n    }\n    \n    @media ${deviceSize.mobileL}{\n        \n    }\n    @media ${deviceSize.tablet}{\n\n    }\n    @media ${deviceSize.laptop}{\n\n    }\n    @media ${deviceSize.laptopL}{\n\n    }\n    @media ${deviceSize.desktop}{\n\n    }\n`\n// margin: 100 0 0 0;","import React from 'react';\nimport { IntroHeaderContainer, IntroTextContainer, IntroTitle, IntroSub } from './style.js';\n\nconst IntroHeader = () => {\n    return (\n        <IntroHeaderContainer>\n                <IntroTextContainer>\n                    <IntroTitle>\n                        Alexander Hoskinson \n                    </IntroTitle>\n                    <IntroSub>\n                        Full-Stack Web Developer\n                    </IntroSub>\n                </IntroTextContainer>\n                \n        </IntroHeaderContainer>\n    )\n\n}\n\nexport default IntroHeader;","import styled from 'styled-components'\nimport { deviceSize } from '../App/device.js'\n\nexport const ComingSoonContainer = styled.div`\n    padding: normal;\n    margin: 2.3rem;\n    @media ${deviceSize.mobileS}{\n\n    }\n\n    @media ${deviceSize.mobileM} {\n        \n    }\n\n    @media ${deviceSize.mobileL}{\n        \n    }\n    @media ${deviceSize.tablet}{\n\n    }\n    @media ${deviceSize.laptop}{\n\n    }\n    @media ${deviceSize.laptopL}{\n\n    }\n    @media ${deviceSize.desktop}{\n\n    }\n\n`","import React from 'react';\nimport { ComingSoonContainer } from './style';\n\nconst ComingSoon = () => {\n    return (\n        <ComingSoonContainer>\n            Projects and additional info coming soon. \n            Until then, let's connect <a href=\"https://www.linkedin.com/in/alexhoskinson/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a> and <a href=\"https://github.com/alexander215\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.\n        </ComingSoonContainer>\n        \n    )\n}\n\nexport default ComingSoon;","import React from 'react';\nimport './style.css';\nimport IntroHeader from '../IntroHeader';\nimport Projects from '../Projects';\nimport Skills from '../Skills';\nimport Experience from '../Experience';\nimport Education from '../Education';\nimport Contact from '../Contact';\nimport ComingSoon from '../ComingSoon';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IntroHeader />\n      <ComingSoon />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}